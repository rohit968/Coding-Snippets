/* 
=================================================
üì¶ Module Scope & Hoisting in JavaScript Modules
=================================================

1Ô∏è‚É£ What is this?
------------------
üîí JavaScript modules have **their own top-level scope**.  
They're **not global**, and nothing declared inside leaks out by default.

Hoisting still occurs in modules ‚Äî but with stricter rules compared to regular scripts.

2Ô∏è‚É£ Why does it matter?
------------------------
‚úÖ Avoids polluting global scope.  
‚úÖ Promotes modular, maintainable code.  
‚úÖ Explains temporal dead zone (TDZ) behavior in imports/exports.

3Ô∏è‚É£ Why and when to use?
-------------------------
‚úÖ Always ‚Äî JS modules are now standard practice in all modern development.  
‚úÖ Understanding scope & hoisting is critical to avoid ReferenceErrors.

4Ô∏è‚É£ Snippets:
--------------

*/

// ======= Module Scope =========

// file: utils.js
const secret = "Hidden!";
export const show = () => console.log("This is visible.");

// file: main.js
// console.log(secret); ‚ùå ReferenceError: secret is not defined (not global)
import { show } from './utils.js';
show();

// ======= Hoisting Behavior =========

// ‚úÖ Function declarations are hoisted
export function greet() {
  console.log("Hello!");
}

// ‚ùå Variables declared with let/const are hoisted BUT not initialized
// So accessing before declaration throws ReferenceError (TDZ)
console.log(msg); // ‚ùå ReferenceError
const msg = "Hi";

// ‚ùå Cannot use imports before they are resolved
import { value } from './module.js';
console.log(value); // ‚úÖ This works only AFTER module is fully parsed

/*
5Ô∏è‚É£ Real-World Examples:
-------------------------
‚úÖ Modular Architecture:
   - Scope isolation helps prevent variable name conflicts across files.
   - Encourages reusable, testable units of code.

‚úÖ Debugging:
   - Misunderstanding hoisting leads to bugs like:
     "Uncaught ReferenceError: Cannot access before initialization"

‚úÖ TDZ in modules:
   ```js
   console.log(foo); // ReferenceError
   import { foo } from './data.js';

6Ô∏è‚É£ Interview Tips:
‚ùì Q: What‚Äôs the difference between hoisting in scripts vs. modules?
‚úÖ A: In modules, let/const/exports are hoisted but not initialized ‚Äî leading to temporal dead zone.

‚ùì Q: Are modules globally scoped?
‚úÖ A: No ‚Äî modules have their own top-level scope.

‚ùì Q: Why can‚Äôt you use top-level await in non-modules?
‚úÖ A: Because scripts don‚Äôt support top-level await, but modules do (since ES2022).

üî• Bonus: Use "type": "module" in package.json to enable ESM in Node.js and unlock true module scope.
*/